#! /usr/bin/ruby

############################################################
# Universidad Simón Bolívar
# CI3175: Traductores e interpretadores
# 
# Bitiondo
#
# Lenguaje de programación implementado en el lenguaje ruby
# para operaciones en conjuntos de bits.
#
# 
# David Cabeza 13-10191 <13-10191@usb.ve>
# Fabiola Martínez 13-10838 <13-10838@usb.ve>
############################################################

# Import dependencies
require_relative "lexer.rb"
require_relative "parser.rb"
require_relative "symtable.rb"

def main

	# Check if file was given
	if ARGV[0].nil? then
		puts "-- Bitiondo --"
		puts "Syntax: ./bitiondo file [flag]"
		puts "Flags:"
		puts "  -t: Print token list"
		puts "  -a: Print abstract syntax tree"
		return
	end

	# Check if file exists
	if not File.file?(ARGV[0]) then
		puts "File: '" + ARGV[0] + "' does not exist."
		return
	end

	# Check for .bto extension
	ARGV[0] =~ /\w+\.bto\b/

	if $&.nil? then
		puts "Invalid extension. File must have .bto extension"
		return
	end
	
	# Check for flags
	file, *flags = ARGV

	# Create a new instance of a lexer and read the given file 
	lexer = Lexer.new(ARGV[0])

	# Do lexical analysis of the file
	lexer.tokenizer

	# If lexer has lexicographic errors, print them and abort execution
	if lexer.hasLexicographicErrors then
		lexer.printLexicographicErrors
		return
	end

	# If wanted, print tokens
	if flags.include? "-t" then
		lexer.printTokenList
		return
	end

	# Do syntactical analysis of the file
	# On syntax errors, prints unexpected token
	begin
		parser = Parser.new(lexer)
		ast = parser.parse
		# if flags.include? "-a" then
		# 	ast.printAST
		# 	return
		# end
	rescue SyntacticError => e
		puts e
		return
	end

	# Create symbol table for the AST returned by the parser
	begin
		ast.check(nil)
		ast.printAST
	end

end

# MAIN
if __FILE__ == $0
	main
end